name: Sincronizar Licenças e README

on:
  workflow_dispatch:

jobs:
  update_files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositório atual
        uses: actions/checkout@v2

      - name: Sincronizar arquivos com push forçado para a branch principal (main)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { promisify } = require('util');
            const sleep = promisify(setTimeout);
            const fs = require('fs').promises;
            const path = require('path');

            const filesToSync = ['README.md', 'LICENSE', 'LICENSE.md'];  // Lista de arquivos a sincronizar
            const repos = ['AppTestClienteCore', 'cliente-core'];  // Lista de repositórios de destino
            const maxAttempts = 3;  // Número máximo de tentativas
            const pushDelay = 3000;  // Delay entre tentativas

            async function createOrUpdateFile(owner, repoName, branchName, filePath, content) {
              const today = new Date().toISOString().slice(0, 10);
              const commitMessage = `chore: Atualizar arquivos de licença e README (${today})`;

              try {
                const base64Content = Buffer.from(content).toString('base64');
                await github.rest.repos.createOrUpdateFileContents({
                  owner,
                  repo: repoName,
                  path: filePath,
                  message: commitMessage,
                  content: base64Content,
                  branch: branchName,  // Push direto para a branch 'main'
                  committer: {
                    name: "License Bot",
                    email: "license-bot@users.noreply.github.com"
                  }
                });

                console.log(`✅ Arquivo ${filePath} sincronizado com sucesso em ${repoName}`);
              } catch (error) {
                console.error(`❌ Erro ao criar/atualizar ${filePath} em ${repoName}:`, error.message);
              }
            }

            async function processRepos() {
              for (const repo of repos) {
                const owner = 'valmirblima';  // Seu nome de usuário
                const repoName = repo;

                for (const file of filesToSync) {
                  const filePath = path.join(process.env.GITHUB_WORKSPACE, file);
                  let fileContent = '';
                  try {
                    fileContent = await fs.readFile(filePath, 'utf8');
                  } catch (err) {
                    console.warn(`Arquivo ${file} não encontrado, será criado em ${repoName}`);
                    // Se o arquivo não existir, crie um conteúdo padrão ou vazio
                    fileContent = `# ${file}\n\nEste arquivo foi criado automaticamente.\n`;
                  }

                  // Criar ou atualizar o arquivo
                  await createOrUpdateFile(owner, repoName, 'main', file, fileContent);
                }
              }
            }

            processRepos();
