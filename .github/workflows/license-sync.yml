name: Force License Sync with Auto-Merge

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
  TARGET_TOPIC: "license-sync"
  FILES_TO_SYNC: '["README.md", "LICENSE", "LICENSE.md"]'
  MAX_MERGE_ATTEMPTS: "3"
  MERGE_DELAY: "10000"

jobs:
  force-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: read

    steps:
      - name: Checkout reposit칩rio fonte
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Buscar reposit칩rios com o t칩pico
        id: get_repos
        run: |
          response=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
            "https://api.github.com/search/repositories?q=topic:${{ env.TARGET_TOPIC }}+user:${{ github.repository_owner }}")
          
          if echo "$response" | jq -e '.items' > /dev/null; then
            repos=$(echo "$response" | jq -r '.items[].full_name' | tr '\n' ',')
            echo "repos=${repos%,}" >> $GITHUB_OUTPUT
          else
            echo "Erro na API do GitHub:"
            echo "$response" | jq .
            exit 1
          fi

      - name: Sincronizar e Mesclar
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const { promisify } = require('util');
            const sleep = promisify(setTimeout);
            const crypto = require('crypto');
            const fs = require('fs').promises;
            const path = require('path');

            // Configura칞칫es
            const filesToSync = JSON.parse(process.env.FILES_TO_SYNC);
            const repos = '${{ steps.get_repos.outputs.repos }}'.split(',').filter(Boolean);
            const maxAttempts = parseInt(process.env.MAX_MERGE_ATTEMPTS);
            const mergeDelay = parseInt(process.env.MERGE_DELAY);

            async function tryMerge(owner, repoName, prNumber, attempt = 1) {
              try {
                const { data: pr } = await github.rest.pulls.get({
                  owner,
                  repo: repoName,
                  pull_number: prNumber
                });

                if (pr.merged) return true;
                if (attempt >= maxAttempts) return false;

                if (pr.mergeable_state === 'clean') {
                  await github.rest.pulls.merge({
                    owner,
                    repo: repoName,
                    pull_number: prNumber,
                    merge_method: 'squash'
                  });
                  return true;
                }

                console.log(`Tentativa ${attempt}/${maxAttempts}: PR #${prNumber} n칚o est치 pronto (estado: ${pr.mergeable_state})`);
                await sleep(mergeDelay);
                return tryMerge(owner, repoName, prNumber, attempt + 1);
              } catch (error) {
                console.error(`Erro no merge do PR #${prNumber}:`, error.message);
                return false;
              }
            }

            // Processamento principal
            (async () => {
              for (const repo of repos) {
                if (repo === '${{ github.repository }}') continue;

                const [owner, repoName] = repo.split('/');
                const today = new Date().toISOString().slice(0, 10);
                const branchName = `license-sync-bot/${today.replace(/-/g, '')}`;

                try {
                  // 1. Configura칞칚o do branch
                  const { data: repoData } = await github.rest.repos.get({ owner, repo: repoName });
                  const defaultBranch = repoData.default_branch;

                  try {
                    const { data: refData } = await github.rest.git.getRef({
                      owner,
                      repo: repoName,
                      ref: `heads/${defaultBranch}`
                    });
                    await github.rest.git.createRef({
                      owner,
                      repo: repoName,
                      ref: `refs/heads/${branchName}`,
                      sha: refData.object.sha
                    });
                  } catch (e) {
                    if (e.status !== 422) throw e;
                  }

                  // 2. Atualiza칞칚o de arquivos
                  let hasChanges = false;
                  for (const file of filesToSync) {
                    try {
                      const filePath = path.join(process.env.GITHUB_WORKSPACE, file);
                      const localContent = await fs.readFile(filePath, 'utf8');
                      const contentHash = crypto.createHash('sha1').update(localContent).digest('hex');

                      let needsUpdate = true;
                      try {
                        const { data: remoteFile } = await github.rest.repos.getContent({
                          owner,
                          repo: repoName,
                          path: file,
                          ref: branchName
                        });
                        const remoteContent = Buffer.from(remoteFile.content, 'base64').toString('utf8');
                        needsUpdate = (crypto.createHash('sha1').update(remoteContent).digest('hex') !== contentHash);
                      } catch (e) {}

                      if (needsUpdate) {
                        await github.rest.repos.createOrUpdateFileContents({
                          owner,
                          repo: repoName,
                          path: file,
                          message: `chore: Atualizar ${file} [skip ci]`,
                          content: Buffer.from(localContent).toString('base64'),
                          branch: branchName,
                          committer: {
                            name: "License Bot",
                            email: "license-bot@users.noreply.github.com"
                          }
                        });
                        hasChanges = true;
                      }
                    } catch (error) {
                      console.warn(`Falha em ${file}@${repoName}:`, error.message);
                    }
                  }

                  // 3. Processamento do PR
                  if (hasChanges) {
                    const pr = await github.rest.pulls.create({
                      owner,
                      repo: repoName,
                      title: `游닆 Atualiza칞칚o de licen칞a (${today})`,
                      head: branchName,
                      base: defaultBranch,
                      body: `## Atualiza칞칚o autom치tica\n\n*Arquivos modificados:*\n${filesToSync.map(f => `- ${f}`).join('\n')}`,
                      draft: false
                    });

                    const mergeSuccess = await tryMerge(owner, repoName, pr.data.number);
                    console.log(mergeSuccess ? 'Merge realizado' : 'Merge n칚o realizado');
                  }
                } catch (error) {
                  console.error(`Erro em ${repoName}:`, error.message);
                }
              }
            })();
